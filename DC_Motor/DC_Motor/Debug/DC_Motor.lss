
DC_Motor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000462  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000004d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000015  00800060  00800060  000004d6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004d6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000508  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000140  00000000  00000000  00000544  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e07  00000000  00000000  00000684  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007dd  00000000  00000000  0000148b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000765  00000000  00000000  00001c68  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002ac  00000000  00000000  000023d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005b4  00000000  00000000  0000267c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000637  00000000  00000000  00002c30  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  00003267  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 b5 01 	jmp	0x36a	; 0x36a <__vector_7>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a5 37       	cpi	r26, 0x75	; 117
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 58 01 	call	0x2b0	; 0x2b0 <main>
  74:	0c 94 2f 02 	jmp	0x45e	; 0x45e <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <DcMotor_Init>:
#include "Timer.h"

void DcMotor_Init(void)
{
	
	DIO_SetPinDir(DIO_PORTC ,DIO_PIN3 , DIO_PIN_OUTPUT);
  7c:	41 e0       	ldi	r20, 0x01	; 1
  7e:	63 e0       	ldi	r22, 0x03	; 3
  80:	82 e0       	ldi	r24, 0x02	; 2
  82:	0e 94 76 00 	call	0xec	; 0xec <DIO_SetPinDir>
	DIO_SetPinDir(DIO_PORTC ,DIO_PIN4 , DIO_PIN_OUTPUT);
  86:	41 e0       	ldi	r20, 0x01	; 1
  88:	64 e0       	ldi	r22, 0x04	; 4
  8a:	82 e0       	ldi	r24, 0x02	; 2
  8c:	0e 94 76 00 	call	0xec	; 0xec <DIO_SetPinDir>
	DIO_SetPinDir(DIO_PORTD ,DIO_PIN4 , DIO_PIN_OUTPUT);
  90:	41 e0       	ldi	r20, 0x01	; 1
  92:	64 e0       	ldi	r22, 0x04	; 4
  94:	83 e0       	ldi	r24, 0x03	; 3
  96:	0e 94 76 00 	call	0xec	; 0xec <DIO_SetPinDir>
	
	//DIO_SetPinDir(DIO_PORTB ,DIO_PIN3 , DIO_PIN_OUTPUT);
	
	PWM0_Init();
  9a:	0e 94 04 02 	call	0x408	; 0x408 <PWM0_Init>
  9e:	08 95       	ret

000000a0 <DcMotor_SetDir>:


void DcMotor_SetDir(DC_MOTOR_DIR dir)
{
	
	switch(dir)
  a0:	88 23       	and	r24, r24
  a2:	19 f0       	breq	.+6      	; 0xaa <DcMotor_SetDir+0xa>
  a4:	81 30       	cpi	r24, 0x01	; 1
  a6:	61 f0       	breq	.+24     	; 0xc0 <DcMotor_SetDir+0x20>
  a8:	08 95       	ret
	{
		
		case CLOCK_WISE_DIR :
		
		DIO_WritePin(DIO_PORTC ,DIO_PIN3,DIO_PIN_HIGH);
  aa:	41 e0       	ldi	r20, 0x01	; 1
  ac:	63 e0       	ldi	r22, 0x03	; 3
  ae:	82 e0       	ldi	r24, 0x02	; 2
  b0:	0e 94 e7 00 	call	0x1ce	; 0x1ce <DIO_WritePin>
		DIO_WritePin(DIO_PORTC ,DIO_PIN4,DIO_PIN_LOW);
  b4:	40 e0       	ldi	r20, 0x00	; 0
  b6:	64 e0       	ldi	r22, 0x04	; 4
  b8:	82 e0       	ldi	r24, 0x02	; 2
  ba:	0e 94 e7 00 	call	0x1ce	; 0x1ce <DIO_WritePin>
		
		break;
  be:	08 95       	ret
		
		case UNTI_CLOCK_WISE_DIR :
		
		DIO_WritePin(DIO_PORTC ,DIO_PIN3,DIO_PIN_LOW);
  c0:	40 e0       	ldi	r20, 0x00	; 0
  c2:	63 e0       	ldi	r22, 0x03	; 3
  c4:	82 e0       	ldi	r24, 0x02	; 2
  c6:	0e 94 e7 00 	call	0x1ce	; 0x1ce <DIO_WritePin>
		DIO_WritePin(DIO_PORTC ,DIO_PIN4,DIO_PIN_HIGH);
  ca:	41 e0       	ldi	r20, 0x01	; 1
  cc:	64 e0       	ldi	r22, 0x04	; 4
  ce:	82 e0       	ldi	r24, 0x02	; 2
  d0:	0e 94 e7 00 	call	0x1ce	; 0x1ce <DIO_WritePin>
  d4:	08 95       	ret

000000d6 <DcMotor_SetSpeed>:

void DcMotor_SetSpeed(uint8 speed)
{
	speed *= 10;
	
	PWM0_Generate(speed);
  d6:	88 0f       	add	r24, r24
  d8:	98 2f       	mov	r25, r24
  da:	99 0f       	add	r25, r25
  dc:	99 0f       	add	r25, r25
  de:	89 0f       	add	r24, r25
  e0:	0e 94 0c 02 	call	0x418	; 0x418 <PWM0_Generate>
  e4:	08 95       	ret

000000e6 <DcMotor_Start>:


void DcMotor_Start(void)
{
	
	PWM0_Start();
  e6:	0e 94 1c 02 	call	0x438	; 0x438 <PWM0_Start>
  ea:	08 95       	ret

000000ec <DIO_SetPinDir>:

		break;

	case DIO_PORTD :

		PORTD = Val;
  ec:	44 23       	and	r20, r20
  ee:	b9 f1       	breq	.+110    	; 0x15e <DIO_SetPinDir+0x72>
  f0:	41 30       	cpi	r20, 0x01	; 1
  f2:	09 f0       	breq	.+2      	; 0xf6 <DIO_SetPinDir+0xa>
  f4:	6b c0       	rjmp	.+214    	; 0x1cc <DIO_SetPinDir+0xe0>
  f6:	81 30       	cpi	r24, 0x01	; 1
  f8:	89 f0       	breq	.+34     	; 0x11c <DIO_SetPinDir+0x30>
  fa:	28 f0       	brcs	.+10     	; 0x106 <DIO_SetPinDir+0x1a>
  fc:	82 30       	cpi	r24, 0x02	; 2
  fe:	c9 f0       	breq	.+50     	; 0x132 <DIO_SetPinDir+0x46>
 100:	83 30       	cpi	r24, 0x03	; 3
 102:	11 f1       	breq	.+68     	; 0x148 <DIO_SetPinDir+0x5c>
 104:	08 95       	ret
 106:	2a b3       	in	r18, 0x1a	; 26
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	02 c0       	rjmp	.+4      	; 0x112 <DIO_SetPinDir+0x26>
 10e:	88 0f       	add	r24, r24
 110:	99 1f       	adc	r25, r25
 112:	6a 95       	dec	r22
 114:	e2 f7       	brpl	.-8      	; 0x10e <DIO_SetPinDir+0x22>
 116:	82 2b       	or	r24, r18
 118:	8a bb       	out	0x1a, r24	; 26
 11a:	08 95       	ret
 11c:	27 b3       	in	r18, 0x17	; 23
 11e:	81 e0       	ldi	r24, 0x01	; 1
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	02 c0       	rjmp	.+4      	; 0x128 <DIO_SetPinDir+0x3c>
 124:	88 0f       	add	r24, r24
 126:	99 1f       	adc	r25, r25
 128:	6a 95       	dec	r22
 12a:	e2 f7       	brpl	.-8      	; 0x124 <DIO_SetPinDir+0x38>
 12c:	82 2b       	or	r24, r18
 12e:	87 bb       	out	0x17, r24	; 23
 130:	08 95       	ret
 132:	24 b3       	in	r18, 0x14	; 20
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	02 c0       	rjmp	.+4      	; 0x13e <DIO_SetPinDir+0x52>
 13a:	88 0f       	add	r24, r24
 13c:	99 1f       	adc	r25, r25
 13e:	6a 95       	dec	r22
 140:	e2 f7       	brpl	.-8      	; 0x13a <DIO_SetPinDir+0x4e>
 142:	82 2b       	or	r24, r18
 144:	84 bb       	out	0x14, r24	; 20
 146:	08 95       	ret
 148:	21 b3       	in	r18, 0x11	; 17
 14a:	81 e0       	ldi	r24, 0x01	; 1
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	02 c0       	rjmp	.+4      	; 0x154 <DIO_SetPinDir+0x68>
 150:	88 0f       	add	r24, r24
 152:	99 1f       	adc	r25, r25
 154:	6a 95       	dec	r22
 156:	e2 f7       	brpl	.-8      	; 0x150 <DIO_SetPinDir+0x64>
 158:	82 2b       	or	r24, r18
 15a:	81 bb       	out	0x11, r24	; 17
 15c:	08 95       	ret
 15e:	81 30       	cpi	r24, 0x01	; 1
 160:	91 f0       	breq	.+36     	; 0x186 <DIO_SetPinDir+0x9a>
 162:	28 f0       	brcs	.+10     	; 0x16e <DIO_SetPinDir+0x82>
 164:	82 30       	cpi	r24, 0x02	; 2
 166:	d9 f0       	breq	.+54     	; 0x19e <DIO_SetPinDir+0xb2>
 168:	83 30       	cpi	r24, 0x03	; 3
 16a:	29 f1       	breq	.+74     	; 0x1b6 <DIO_SetPinDir+0xca>
 16c:	08 95       	ret
 16e:	2a b3       	in	r18, 0x1a	; 26
 170:	81 e0       	ldi	r24, 0x01	; 1
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	02 c0       	rjmp	.+4      	; 0x17a <DIO_SetPinDir+0x8e>
 176:	88 0f       	add	r24, r24
 178:	99 1f       	adc	r25, r25
 17a:	6a 95       	dec	r22
 17c:	e2 f7       	brpl	.-8      	; 0x176 <DIO_SetPinDir+0x8a>
 17e:	80 95       	com	r24
 180:	82 23       	and	r24, r18
 182:	8a bb       	out	0x1a, r24	; 26
 184:	08 95       	ret
 186:	27 b3       	in	r18, 0x17	; 23
 188:	81 e0       	ldi	r24, 0x01	; 1
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	02 c0       	rjmp	.+4      	; 0x192 <DIO_SetPinDir+0xa6>
 18e:	88 0f       	add	r24, r24
 190:	99 1f       	adc	r25, r25
 192:	6a 95       	dec	r22
 194:	e2 f7       	brpl	.-8      	; 0x18e <DIO_SetPinDir+0xa2>
 196:	80 95       	com	r24
 198:	82 23       	and	r24, r18
 19a:	87 bb       	out	0x17, r24	; 23
 19c:	08 95       	ret
 19e:	24 b3       	in	r18, 0x14	; 20
 1a0:	81 e0       	ldi	r24, 0x01	; 1
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	02 c0       	rjmp	.+4      	; 0x1aa <DIO_SetPinDir+0xbe>
 1a6:	88 0f       	add	r24, r24
 1a8:	99 1f       	adc	r25, r25
 1aa:	6a 95       	dec	r22
 1ac:	e2 f7       	brpl	.-8      	; 0x1a6 <DIO_SetPinDir+0xba>
 1ae:	80 95       	com	r24
 1b0:	82 23       	and	r24, r18
 1b2:	84 bb       	out	0x14, r24	; 20
 1b4:	08 95       	ret
 1b6:	21 b3       	in	r18, 0x11	; 17
 1b8:	81 e0       	ldi	r24, 0x01	; 1
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	02 c0       	rjmp	.+4      	; 0x1c2 <DIO_SetPinDir+0xd6>
 1be:	88 0f       	add	r24, r24
 1c0:	99 1f       	adc	r25, r25
 1c2:	6a 95       	dec	r22
 1c4:	e2 f7       	brpl	.-8      	; 0x1be <DIO_SetPinDir+0xd2>
 1c6:	80 95       	com	r24
 1c8:	82 23       	and	r24, r18
 1ca:	81 bb       	out	0x11, r24	; 17
 1cc:	08 95       	ret

000001ce <DIO_WritePin>:



void DIO_WritePin(uint8 Port ,uint8 Pin, uint8 Val)
{
	switch (Val)
 1ce:	44 23       	and	r20, r20
 1d0:	b9 f1       	breq	.+110    	; 0x240 <DIO_WritePin+0x72>
 1d2:	41 30       	cpi	r20, 0x01	; 1
 1d4:	09 f0       	breq	.+2      	; 0x1d8 <DIO_WritePin+0xa>
 1d6:	6b c0       	rjmp	.+214    	; 0x2ae <DIO_WritePin+0xe0>


	case DIO_PIN_HIGH :


		switch (Port)
 1d8:	81 30       	cpi	r24, 0x01	; 1
 1da:	89 f0       	breq	.+34     	; 0x1fe <DIO_WritePin+0x30>
 1dc:	28 f0       	brcs	.+10     	; 0x1e8 <DIO_WritePin+0x1a>
 1de:	82 30       	cpi	r24, 0x02	; 2
 1e0:	c9 f0       	breq	.+50     	; 0x214 <DIO_WritePin+0x46>
 1e2:	83 30       	cpi	r24, 0x03	; 3
 1e4:	11 f1       	breq	.+68     	; 0x22a <DIO_WritePin+0x5c>
 1e6:	08 95       	ret
		{
		case DIO_PORTA :

			SET_BIT(PORTA,Pin);
 1e8:	2b b3       	in	r18, 0x1b	; 27
 1ea:	81 e0       	ldi	r24, 0x01	; 1
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	02 c0       	rjmp	.+4      	; 0x1f4 <DIO_WritePin+0x26>
 1f0:	88 0f       	add	r24, r24
 1f2:	99 1f       	adc	r25, r25
 1f4:	6a 95       	dec	r22
 1f6:	e2 f7       	brpl	.-8      	; 0x1f0 <DIO_WritePin+0x22>
 1f8:	82 2b       	or	r24, r18
 1fa:	8b bb       	out	0x1b, r24	; 27

			break;
 1fc:	08 95       	ret

		case DIO_PORTB :

			SET_BIT(PORTB,Pin);
 1fe:	28 b3       	in	r18, 0x18	; 24
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	02 c0       	rjmp	.+4      	; 0x20a <DIO_WritePin+0x3c>
 206:	88 0f       	add	r24, r24
 208:	99 1f       	adc	r25, r25
 20a:	6a 95       	dec	r22
 20c:	e2 f7       	brpl	.-8      	; 0x206 <DIO_WritePin+0x38>
 20e:	82 2b       	or	r24, r18
 210:	88 bb       	out	0x18, r24	; 24

			break;
 212:	08 95       	ret

		case DIO_PORTC :

			SET_BIT(PORTC,Pin);
 214:	25 b3       	in	r18, 0x15	; 21
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	02 c0       	rjmp	.+4      	; 0x220 <DIO_WritePin+0x52>
 21c:	88 0f       	add	r24, r24
 21e:	99 1f       	adc	r25, r25
 220:	6a 95       	dec	r22
 222:	e2 f7       	brpl	.-8      	; 0x21c <DIO_WritePin+0x4e>
 224:	82 2b       	or	r24, r18
 226:	85 bb       	out	0x15, r24	; 21

			break;
 228:	08 95       	ret

		case DIO_PORTD :

			SET_BIT(PORTD,Pin);
 22a:	22 b3       	in	r18, 0x12	; 18
 22c:	81 e0       	ldi	r24, 0x01	; 1
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	02 c0       	rjmp	.+4      	; 0x236 <DIO_WritePin+0x68>
 232:	88 0f       	add	r24, r24
 234:	99 1f       	adc	r25, r25
 236:	6a 95       	dec	r22
 238:	e2 f7       	brpl	.-8      	; 0x232 <DIO_WritePin+0x64>
 23a:	82 2b       	or	r24, r18
 23c:	82 bb       	out	0x12, r24	; 18

			break;
 23e:	08 95       	ret
		break;

		case DIO_PIN_LOW :


			switch (Port)
 240:	81 30       	cpi	r24, 0x01	; 1
 242:	91 f0       	breq	.+36     	; 0x268 <DIO_WritePin+0x9a>
 244:	28 f0       	brcs	.+10     	; 0x250 <DIO_WritePin+0x82>
 246:	82 30       	cpi	r24, 0x02	; 2
 248:	d9 f0       	breq	.+54     	; 0x280 <DIO_WritePin+0xb2>
 24a:	83 30       	cpi	r24, 0x03	; 3
 24c:	29 f1       	breq	.+74     	; 0x298 <DIO_WritePin+0xca>
 24e:	08 95       	ret
			{
			case DIO_PORTA :

				CLR_BIT(PORTA,Pin);
 250:	2b b3       	in	r18, 0x1b	; 27
 252:	81 e0       	ldi	r24, 0x01	; 1
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	02 c0       	rjmp	.+4      	; 0x25c <DIO_WritePin+0x8e>
 258:	88 0f       	add	r24, r24
 25a:	99 1f       	adc	r25, r25
 25c:	6a 95       	dec	r22
 25e:	e2 f7       	brpl	.-8      	; 0x258 <DIO_WritePin+0x8a>
 260:	80 95       	com	r24
 262:	82 23       	and	r24, r18
 264:	8b bb       	out	0x1b, r24	; 27

				break;
 266:	08 95       	ret

			case DIO_PORTB :

				CLR_BIT(PORTB,Pin);
 268:	28 b3       	in	r18, 0x18	; 24
 26a:	81 e0       	ldi	r24, 0x01	; 1
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	02 c0       	rjmp	.+4      	; 0x274 <DIO_WritePin+0xa6>
 270:	88 0f       	add	r24, r24
 272:	99 1f       	adc	r25, r25
 274:	6a 95       	dec	r22
 276:	e2 f7       	brpl	.-8      	; 0x270 <DIO_WritePin+0xa2>
 278:	80 95       	com	r24
 27a:	82 23       	and	r24, r18
 27c:	88 bb       	out	0x18, r24	; 24

				break;
 27e:	08 95       	ret

			case DIO_PORTC :

				CLR_BIT(PORTC,Pin);
 280:	25 b3       	in	r18, 0x15	; 21
 282:	81 e0       	ldi	r24, 0x01	; 1
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	02 c0       	rjmp	.+4      	; 0x28c <DIO_WritePin+0xbe>
 288:	88 0f       	add	r24, r24
 28a:	99 1f       	adc	r25, r25
 28c:	6a 95       	dec	r22
 28e:	e2 f7       	brpl	.-8      	; 0x288 <DIO_WritePin+0xba>
 290:	80 95       	com	r24
 292:	82 23       	and	r24, r18
 294:	85 bb       	out	0x15, r24	; 21

				break;
 296:	08 95       	ret

			case DIO_PORTD :

				CLR_BIT(PORTD,Pin);
 298:	22 b3       	in	r18, 0x12	; 18
 29a:	81 e0       	ldi	r24, 0x01	; 1
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	02 c0       	rjmp	.+4      	; 0x2a4 <DIO_WritePin+0xd6>
 2a0:	88 0f       	add	r24, r24
 2a2:	99 1f       	adc	r25, r25
 2a4:	6a 95       	dec	r22
 2a6:	e2 f7       	brpl	.-8      	; 0x2a0 <DIO_WritePin+0xd2>
 2a8:	80 95       	com	r24
 2aa:	82 23       	and	r24, r18
 2ac:	82 bb       	out	0x12, r24	; 18
 2ae:	08 95       	ret

000002b0 <main>:
#include "DC_Motor.h"

int main(void)
{
  
   DcMotor_Init();
 2b0:	0e 94 3e 00 	call	0x7c	; 0x7c <DcMotor_Init>
   DcMotor_SetDir(CLOCK_WISE_DIR);
 2b4:	80 e0       	ldi	r24, 0x00	; 0
 2b6:	0e 94 50 00 	call	0xa0	; 0xa0 <DcMotor_SetDir>
   DcMotor_SetSpeed(6);
 2ba:	86 e0       	ldi	r24, 0x06	; 6
 2bc:	0e 94 6b 00 	call	0xd6	; 0xd6 <DcMotor_SetSpeed>
   DcMotor_Start();
 2c0:	0e 94 73 00 	call	0xe6	; 0xe6 <DcMotor_Start>
 2c4:	ff cf       	rjmp	.-2      	; 0x2c4 <main+0x14>

000002c6 <__vector_11>:
}


void TIMER1_SetCallBack(void(*ptr)(void))
{
	timer1_ptr_func = ptr;
 2c6:	1f 92       	push	r1
 2c8:	0f 92       	push	r0
 2ca:	0f b6       	in	r0, 0x3f	; 63
 2cc:	0f 92       	push	r0
 2ce:	11 24       	eor	r1, r1
 2d0:	2f 93       	push	r18
 2d2:	3f 93       	push	r19
 2d4:	4f 93       	push	r20
 2d6:	5f 93       	push	r21
 2d8:	6f 93       	push	r22
 2da:	7f 93       	push	r23
 2dc:	8f 93       	push	r24
 2de:	9f 93       	push	r25
 2e0:	af 93       	push	r26
 2e2:	bf 93       	push	r27
 2e4:	ef 93       	push	r30
 2e6:	ff 93       	push	r31
 2e8:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <counter.1638>
 2ec:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <counter.1638+0x1>
 2f0:	a0 91 66 00 	lds	r26, 0x0066	; 0x800066 <counter.1638+0x2>
 2f4:	b0 91 67 00 	lds	r27, 0x0067	; 0x800067 <counter.1638+0x3>
 2f8:	01 96       	adiw	r24, 0x01	; 1
 2fa:	a1 1d       	adc	r26, r1
 2fc:	b1 1d       	adc	r27, r1
 2fe:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <counter.1638>
 302:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <counter.1638+0x1>
 306:	a0 93 66 00 	sts	0x0066, r26	; 0x800066 <counter.1638+0x2>
 30a:	b0 93 67 00 	sts	0x0067, r27	; 0x800067 <counter.1638+0x3>
 30e:	40 91 6e 00 	lds	r20, 0x006E	; 0x80006e <Number_OverFlows>
 312:	50 91 6f 00 	lds	r21, 0x006F	; 0x80006f <Number_OverFlows+0x1>
 316:	60 91 70 00 	lds	r22, 0x0070	; 0x800070 <Number_OverFlows+0x2>
 31a:	70 91 71 00 	lds	r23, 0x0071	; 0x800071 <Number_OverFlows+0x3>
 31e:	84 17       	cp	r24, r20
 320:	95 07       	cpc	r25, r21
 322:	a6 07       	cpc	r26, r22
 324:	b7 07       	cpc	r27, r23
 326:	81 f4       	brne	.+32     	; 0x348 <__vector_11+0x82>
 328:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <CounterRegister_InitValue>
 32c:	82 bf       	out	0x32, r24	; 50
 32e:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <counter.1638>
 332:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <counter.1638+0x1>
 336:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <counter.1638+0x2>
 33a:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <counter.1638+0x3>
 33e:	e0 91 73 00 	lds	r30, 0x0073	; 0x800073 <timer0_ptr_func>
 342:	f0 91 74 00 	lds	r31, 0x0074	; 0x800074 <timer0_ptr_func+0x1>
 346:	09 95       	icall
 348:	ff 91       	pop	r31
 34a:	ef 91       	pop	r30
 34c:	bf 91       	pop	r27
 34e:	af 91       	pop	r26
 350:	9f 91       	pop	r25
 352:	8f 91       	pop	r24
 354:	7f 91       	pop	r23
 356:	6f 91       	pop	r22
 358:	5f 91       	pop	r21
 35a:	4f 91       	pop	r20
 35c:	3f 91       	pop	r19
 35e:	2f 91       	pop	r18
 360:	0f 90       	pop	r0
 362:	0f be       	out	0x3f, r0	; 63
 364:	0f 90       	pop	r0
 366:	1f 90       	pop	r1
 368:	18 95       	reti

0000036a <__vector_7>:
}



ISR(TIMER1_COMPA_vect)
{
 36a:	1f 92       	push	r1
 36c:	0f 92       	push	r0
 36e:	0f b6       	in	r0, 0x3f	; 63
 370:	0f 92       	push	r0
 372:	11 24       	eor	r1, r1
 374:	2f 93       	push	r18
 376:	3f 93       	push	r19
 378:	4f 93       	push	r20
 37a:	5f 93       	push	r21
 37c:	6f 93       	push	r22
 37e:	7f 93       	push	r23
 380:	8f 93       	push	r24
 382:	9f 93       	push	r25
 384:	af 93       	push	r26
 386:	bf 93       	push	r27
 388:	ef 93       	push	r30
 38a:	ff 93       	push	r31
	static uint32 counter = 0;
	
	counter ++;
 38c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 390:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <_edata+0x1>
 394:	a0 91 62 00 	lds	r26, 0x0062	; 0x800062 <_edata+0x2>
 398:	b0 91 63 00 	lds	r27, 0x0063	; 0x800063 <_edata+0x3>
 39c:	01 96       	adiw	r24, 0x01	; 1
 39e:	a1 1d       	adc	r26, r1
 3a0:	b1 1d       	adc	r27, r1
 3a2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
 3a6:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <_edata+0x1>
 3aa:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <_edata+0x2>
 3ae:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <_edata+0x3>
	
	if( counter == Num_CompMatch  )
 3b2:	40 91 68 00 	lds	r20, 0x0068	; 0x800068 <Num_CompMatch>
 3b6:	50 91 69 00 	lds	r21, 0x0069	; 0x800069 <Num_CompMatch+0x1>
 3ba:	60 91 6a 00 	lds	r22, 0x006A	; 0x80006a <Num_CompMatch+0x2>
 3be:	70 91 6b 00 	lds	r23, 0x006B	; 0x80006b <Num_CompMatch+0x3>
 3c2:	84 17       	cp	r24, r20
 3c4:	95 07       	cpc	r25, r21
 3c6:	a6 07       	cpc	r26, r22
 3c8:	b7 07       	cpc	r27, r23
 3ca:	69 f4       	brne	.+26     	; 0x3e6 <__vector_7+0x7c>
	{
		counter = 0;
 3cc:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
 3d0:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <_edata+0x1>
 3d4:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <_edata+0x2>
 3d8:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <_edata+0x3>
		
		(*timer1_ptr_func)();
 3dc:	e0 91 6c 00 	lds	r30, 0x006C	; 0x80006c <timer1_ptr_func>
 3e0:	f0 91 6d 00 	lds	r31, 0x006D	; 0x80006d <timer1_ptr_func+0x1>
 3e4:	09 95       	icall
	}
	
	
}
 3e6:	ff 91       	pop	r31
 3e8:	ef 91       	pop	r30
 3ea:	bf 91       	pop	r27
 3ec:	af 91       	pop	r26
 3ee:	9f 91       	pop	r25
 3f0:	8f 91       	pop	r24
 3f2:	7f 91       	pop	r23
 3f4:	6f 91       	pop	r22
 3f6:	5f 91       	pop	r21
 3f8:	4f 91       	pop	r20
 3fa:	3f 91       	pop	r19
 3fc:	2f 91       	pop	r18
 3fe:	0f 90       	pop	r0
 400:	0f be       	out	0x3f, r0	; 63
 402:	0f 90       	pop	r0
 404:	1f 90       	pop	r1
 406:	18 95       	reti

00000408 <PWM0_Init>:



void PWM0_Init(void)
{
	DDRB |= 0X08;
 408:	bb 9a       	sbi	0x17, 3	; 23
	//setting fast pwm
	TCCR0 |= 0x48;
 40a:	83 b7       	in	r24, 0x33	; 51
 40c:	88 64       	ori	r24, 0x48	; 72
 40e:	83 bf       	out	0x33, r24	; 51
	
	//setting non inverted mode
	
	TCCR0 |= 0x20;
 410:	83 b7       	in	r24, 0x33	; 51
 412:	80 62       	ori	r24, 0x20	; 32
 414:	83 bf       	out	0x33, r24	; 51
 416:	08 95       	ret

00000418 <PWM0_Generate>:
}

void PWM0_Generate(uint16 DutyCycle)
{
	
	OCR0 = ((DutyCycle * 256 ) /100 ) - 1;
 418:	20 e0       	ldi	r18, 0x00	; 0
 41a:	30 e0       	ldi	r19, 0x00	; 0
 41c:	38 2f       	mov	r19, r24
 41e:	36 95       	lsr	r19
 420:	27 95       	ror	r18
 422:	36 95       	lsr	r19
 424:	27 95       	ror	r18
 426:	ab e7       	ldi	r26, 0x7B	; 123
 428:	b4 e1       	ldi	r27, 0x14	; 20
 42a:	0e 94 20 02 	call	0x440	; 0x440 <__umulhisi3>
 42e:	96 95       	lsr	r25
 430:	87 95       	ror	r24
 432:	81 50       	subi	r24, 0x01	; 1
 434:	8c bf       	out	0x3c, r24	; 60
 436:	08 95       	ret

00000438 <PWM0_Start>:
}

void PWM0_Start(void)
{
	TCCR0 |= 0x03 ;
 438:	83 b7       	in	r24, 0x33	; 51
 43a:	83 60       	ori	r24, 0x03	; 3
 43c:	83 bf       	out	0x33, r24	; 51
 43e:	08 95       	ret

00000440 <__umulhisi3>:
 440:	a2 9f       	mul	r26, r18
 442:	b0 01       	movw	r22, r0
 444:	b3 9f       	mul	r27, r19
 446:	c0 01       	movw	r24, r0
 448:	a3 9f       	mul	r26, r19
 44a:	70 0d       	add	r23, r0
 44c:	81 1d       	adc	r24, r1
 44e:	11 24       	eor	r1, r1
 450:	91 1d       	adc	r25, r1
 452:	b2 9f       	mul	r27, r18
 454:	70 0d       	add	r23, r0
 456:	81 1d       	adc	r24, r1
 458:	11 24       	eor	r1, r1
 45a:	91 1d       	adc	r25, r1
 45c:	08 95       	ret

0000045e <_exit>:
 45e:	f8 94       	cli

00000460 <__stop_program>:
 460:	ff cf       	rjmp	.-2      	; 0x460 <__stop_program>
